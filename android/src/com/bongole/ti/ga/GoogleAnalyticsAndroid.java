/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2010 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package com.bongole.ti.ga;

import java.lang.Thread.UncaughtExceptionHandler;
import java.util.HashMap;

import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.annotations.Kroll;

import org.appcelerator.titanium.TiApplication;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.kroll.common.TiConfig;

import com.google.analytics.tracking.android.ExceptionReporter;
import com.google.analytics.tracking.android.GAServiceManager;
import com.google.analytics.tracking.android.GoogleAnalytics;
import com.google.analytics.tracking.android.ServiceManager;
import com.google.analytics.tracking.android.Tracker;


@Kroll.module(name="GoogleAnalyticsAndroid", id="com.bongole.ti.ga")
public class GoogleAnalyticsAndroid extends KrollModule
{

	// Standard Debugging variables
	private static final String LCAT = "GoogleAnalyticsAndroidModule";
	private static final boolean DBG = TiConfig.LOGD;

	// You can define constants with @Kroll.constant, for example:
	// @Kroll.constant public static final String EXTERNAL_NAME = value;
	
	public GoogleAnalyticsAndroid()
	{
		super();
	}

	@Kroll.onAppCreate
	public static void onAppCreate(TiApplication app)
	{
		Log.d(LCAT, "inside onAppCreate");
		// put module init code that needs to run when the application is created
	}

	// Methods
	@Kroll.method
	public void start(HashMap o)
	{
		KrollDict dict = new KrollDict(o);
		
		GoogleAnalytics ga = GoogleAnalytics.getInstance(TiApplication.getInstance().getApplicationContext());
		
		if( dict.containsKeyAndNotNull("debug") ){
			ga.setDebug(dict.getBoolean("debug"));
		}
		
		Integer period = 20;
		if( dict.containsKeyAndNotNull("dispatchInterval") ){
			period = dict.getInt("dispatchInterval");
		}
		
		GAServiceManager.getInstance().setDispatchPeriod( period );
		
		Tracker tracker = ga.getTracker(dict.getString("account"));
		
		if( dict.containsKeyAndNotNull("anonymizeIp") ){
			tracker.setAnonymizeIp(dict.getBoolean("anonymizeIp"));
		}
		
		Double sampleRate = 100.0;
		if( dict.containsKeyAndNotNull("sampleRate") ){
			dict.getDouble("sampleRate");
		}
		tracker.setSampleRate( sampleRate );
		
		ga.setDefaultTracker(tracker);
		
		UncaughtExceptionHandler myHandler = new ExceptionReporter(
			    tracker,                                        // Currently used Tracker.
			    GAServiceManager.getInstance(),
			    Thread.getDefaultUncaughtExceptionHandler());     // Current default uncaught exception handler.

		Thread.setDefaultUncaughtExceptionHandler(myHandler); // Make myHandler the new default uncaught exception handler.
	}
	
	@Kroll.method
	public void trackView(KrollDict o)
	{
		KrollDict dict = new KrollDict(o);
		GoogleAnalytics ga = GoogleAnalytics.getInstance(TiApplication.getInstance().getApplicationContext());
		Tracker tracker = ga.getDefaultTracker();
		
		String viewName = null;
		if( dict.containsKeyAndNotNull("viewName") ){
			viewName = dict.getString("viewName");
		}
		
		tracker.trackView(viewName);
	}
	
	@Kroll.method
	public void trackEvent(KrollDict o)
	{
		KrollDict dict = new KrollDict(o);
		GoogleAnalytics ga = GoogleAnalytics.getInstance(TiApplication.getInstance().getApplicationContext());
		Tracker tracker = ga.getDefaultTracker();
		
		String category = null;
		String action = null;
		String label = null;
		Long value = null;
		
		if( dict.containsKeyAndNotNull("category") ){
			category = dict.getString("category");
		}
		
		if( dict.containsKeyAndNotNull("action")){
			action = dict.getString("action");
		}
		
		if( dict.containsKeyAndNotNull("label")){
			label = dict.getString("label");
		}
		
		if( dict.containsKeyAndNotNull("value")){
			value = dict.getDouble("value").longValue();
		}
		
		tracker.trackEvent(category, action, label, value);
	}
	
	@Kroll.method
	public void trackTiming(KrollDict o)
	{
		KrollDict dict = new KrollDict(o);
		GoogleAnalytics ga = GoogleAnalytics.getInstance(TiApplication.getInstance().getApplicationContext());
		Tracker tracker = ga.getDefaultTracker();
		
		String category = null;
		Long value = null;
		String name = null;
		String label = null;
		
		if( dict.containsKeyAndNotNull("category") ){
			category = dict.getString("category");
		}
		
		if( dict.containsKeyAndNotNull("name")){
			name = dict.getString("name");
		}
		
		if( dict.containsKeyAndNotNull("label")){
			label = dict.getString("label");
		}
		
		if( dict.containsKeyAndNotNull("value")){
			value = dict.getDouble("value").longValue();
		}	
		
		tracker.trackTiming(category, value, name, label);
	}
	
	@Kroll.method
	public void startSession()
	{
		GoogleAnalytics ga = GoogleAnalytics.getInstance(TiApplication.getInstance().getApplicationContext());
		Tracker tracker = ga.getDefaultTracker();
		tracker.setStartSession(true);
	}
	
	@Kroll.method
	public void stoptSession()
	{
		GoogleAnalytics ga = GoogleAnalytics.getInstance(TiApplication.getInstance().getApplicationContext());
		Tracker tracker = ga.getDefaultTracker();
		tracker.setStartSession(false);
	}
}

